/**
 * A utility script for generating request schemas
 * in zod from a given openapi spec.
 */

import { resolveRefs } from "json-refs";
import jsonSchemaToZod from "json-schema-to-zod";
import { parseArgs } from "node:util";
import type { OpenAPIV3 } from "openapi-types";

(async () => {
	const before = performance.now();

	const { positionals, values } = parseArgs({
		args: Bun.argv.slice(2),
		options: {
			input: {
				type: "string",
				short: "i",
			},
			output: {
				type: "string",
				short: "o",
			},
		},
		allowPositionals: true,
	});

	const input = values.input ?? positionals[0];
	const output = values.output ?? positionals[1];

	if (!input) {
		throw new Error("Please provide an input file/url.");
	}

	if (!output) {
		throw new Error("Please provide an output file/url.");
	}

	const exit = (message: (elapsed: number) => string) => {
		const elapsed = performance.now() - before;
		// biome-ignore lint/suspicious/noConsole: We can do a little loggin' here ðŸ˜Ž
		console.log(message(elapsed));
		process.exit();
	};

	let text: string;
	if (input.match(/https?:\/\//)) {
		const response = await fetch(input);
		text = await response.text();
	} else {
		text = await Bun.file(input).text();
	}

	const hasher = new Bun.CryptoHasher("sha256");
	hasher.update(text);
	const hash = hasher.digest("hex").slice(0, 8);
	const json: OpenAPIV3.Document = JSON.parse(text);

	const capitaliseAscii = (x: string) =>
		x[0].toUpperCase() + x.slice(1);

	const exists = await Bun.file(output).exists();
	let contents = "";
	if (exists) {
		contents = await Bun.file(output).text();
	}

	const firstLine = contents.split(/\r*\n/)[0];
	const noChangesInSpecFile = firstLine.startsWith(
		`// ${hash}`,
	);
	if (noChangesInSpecFile) {
		exit(
			(elapsed) =>
				`ðŸ”¥ ${input} (no changes) [${elapsed.toFixed(2)}ms]`,
		);
	}

	const { resolved } = await resolveRefs(json);
	const document = resolved as OpenAPIV3.Document;

	const validators: string[] = [];

	for (const [name, schema] of Object.entries(
		document.components?.schemas ?? {},
	)) {
		if ("$ref" in schema) {
			continue;
		}

		const capitalised = capitaliseAscii(name);
		const formattedName = `${capitalised}Schema`;

		validators.push(
			`export const ${formattedName} = ${jsonSchemaToZod(schema)};`,
			`export type ${capitalised} = z.infer<typeof ${formattedName}>;`,
		);
	}

	const header = `
// ${hash}
// eslint-disable
// prettier-ignore
// @ts-nocheck
/**
 * This file was automatically generated by generate-schemas.ts
 * ***Do not touch!***
 */
import {z} from "zod";
`.trim();

	await Bun.file(output).write(
		`${header}\n\n${validators.join("\n\n")}`,
	);

	exit(
		(elapsed) =>
			`ðŸ”¥ ${input} â†’ ${output} [${elapsed.toFixed(2)}ms]`,
	);
})();
