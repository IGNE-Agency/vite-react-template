/**
 * A utility script for generating request schemas
 * in zod from a given openapi spec.
 */

import { $ } from "bun";
import { resolveRefs } from "json-refs";
import jsonSchemaToZod from "json-schema-to-zod";
import { parseArgs } from "node:util";
import type { OpenAPIV3 } from "openapi-types";

const { positionals, values } = parseArgs({
	args: Bun.argv.slice(2),
	options: {
		input: {
			type: "string",
			short: "i",
		},
		output: {
			type: "string",
			short: "o",
		},
	},
	allowPositionals: true,
});

const input = values.input ?? positionals[0];
const output = values.output ?? positionals[1];

if (!input) {
	throw new Error("Please provide an input file/url.");
}

if (!output) {
	throw new Error("Please provide an output file/url.");
}

const before = performance.now();

let json: OpenAPIV3.Document;
if (input.match(/https?:\/\//)) {
	json = await (await fetch(input)).json();
} else {
	json = await Bun.file(input).json();
}

const capitaliseAscii = (x: string) =>
	x[0].toUpperCase() + x.slice(1);

resolveRefs(json).then(({ resolved: document }) => {
	const validators = [];

	for (const route of Object.values(document.paths)) {
		for (const method of Object.values(route)) {
			if (!method.requestBody?.content) {
				continue;
			}
			const type = Object.values(
				method.requestBody.content,
			)[0];
			validators.push(
				`export const ${capitaliseAscii(method.operationId)}RequestSchema = ${jsonSchemaToZod(type.schema)};`,
			);
		}
	}

	const header = `
/**
 * This file was automatically generated by generate-schemas.ts
 * ***Do not touch!***
 */
import {z} from "zod";
`.trim();

	Bun.file(output)
		.write(`${header}\n\n${validators.join("\n\n")}`)
		.then(() => $`bun run biome format --write ${output}`)
		.then(() => {
			const elapsed = performance.now() - before;
			// biome-ignore lint/suspicious/noConsole: We can do a little loggin' here ðŸ˜Ž
			console.log(
				`ðŸ”¥ ${input} -> ${output} [${elapsed.toFixed(2)}ms]`,
			);
			process.exit();
		});
});
